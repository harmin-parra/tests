/*
package rest_api_rest_assured;

import io.qameta.allure.Allure;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class PetstoreTest {
    
    private int id = 531;
    private RequestLoggingFilter requestLoggingFilter;
    private ResponseLoggingFilter responseLoggingFilter;


    @BeforeAll
    public static void setUp() {
        RestAssured.baseURI = "https://petstore.swagger.io";
        RestAssured.basePath = "/v2/pet";
        RestAssured.requestSpecification = 
                (RequestSpecification) new RequestSpecBuilder()
                    .setContentType(ContentType.JSON)
                    .setAccept(ContentType.JSON)
                    .build(); //.log().uri().log().method();
    }

    @BeforeEach
    public void logger() {
        try {
            PrintStream log_req = new PrintStream(new FileOutputStream("logs" + File.separator + "request.log"));
            PrintStream log_res = new PrintStream(new FileOutputStream("logs" + File.separator + "response.log"));
            requestLoggingFilter = new RequestLoggingFilter(log_req);
            responseLoggingFilter = new ResponseLoggingFilter(log_res);
        } catch (Exception e) { }
    }
    
    @Test
    public void add_pet() {
        Allure.getLifecycle().updateTestCase(tr -> tr.getLabels().removeIf(label -> "suite".equals(label.getName())));
        Allure.feature("REST api");
        Allure.story("Petstore");
        Allure.suite("REST api");

        Map<String, Object> payload = new HashMap<String, Object>();
        payload.put("id", id);
        payload.put("name", "Cookie");
        payload.put("status", "sold");

        with().
            filters(requestLoggingFilter, responseLoggingFilter).
            body(payload).
        when().
            post("/").
        then().
            statusCode(200).
            body("id", equalTo(id)).
            body("name", equalTo("Cookie")).
            body("status", equalTo("sold"));

        try {
            InputStream req = Files.newInputStream(Paths.get("logs", "request.log"));
            InputStream res = Files.newInputStream(Paths.get("logs", "response.log"));
            Allure.addAttachment("request", "text/plain", req, ".log");
            Allure.addAttachment("response", "text/plain", res, ".log");
        } catch (IOException e) { }
    }

    @Test
    public void get_pet() {
        Allure.getLifecycle().updateTestCase(tr -> tr.getLabels().removeIf(label -> "suite".equals(label.getName())));
        Allure.feature("REST api");
        Allure.story("Petstore");
        Allure.suite("REST api");

        with().
            filters(requestLoggingFilter, responseLoggingFilter).
        when().
            get("/{id}", id).
        then().
            statusCode(200).
            body("id", equalTo(id)).
            body("name", equalTo("Cookie")).
            body("status", equalTo("sold"));

        try {
            InputStream req = Files.newInputStream(Paths.get("logs", "request.log"));
            InputStream res = Files.newInputStream(Paths.get("logs", "response.log"));
            Allure.addAttachment("request", "text/plain", req, ".log");
            Allure.addAttachment("response", "text/plain", res, ".log");
        } catch (IOException e) { }
    }
    
    @Test
    public void delete_pet() {
        Allure.getLifecycle().updateTestCase(tr -> tr.getLabels().removeIf(label -> "suite".equals(label.getName())));
        Allure.feature("REST api");
        Allure.story("Petstore");
        Allure.suite("REST api");

        // Delete pet
        with().
            filters(requestLoggingFilter, responseLoggingFilter).
        when().
            delete("/{id}", id).
        then().
            statusCode(200).
            body("message", equalTo(Integer.toString(id)));


        try {
            InputStream req = Files.newInputStream(Paths.get("logs", "request.log"));
            InputStream res = Files.newInputStream(Paths.get("logs", "response.log"));
            Allure.addAttachment("delete request", "text/plain", req, ".log");
            Allure.addAttachment("delete response", "text/plain", res, ".log");
        } catch (IOException e) { }

        // Get deleted pet
        RequestLoggingFilter requestLoggingFilter2 = null;
        ResponseLoggingFilter responseLoggingFilter2 = null;
        try {
            PrintStream log_req2 = new PrintStream(new FileOutputStream("logs" + File.separator + "request2.log"));
            PrintStream log_res2 = new PrintStream(new FileOutputStream("logs" + File.separator + "response2.log"));
            requestLoggingFilter2 = new RequestLoggingFilter(log_req2);
            responseLoggingFilter2 = new ResponseLoggingFilter(log_res2);
        } catch (Exception e) { }

        with().
            filters(requestLoggingFilter2, responseLoggingFilter2).
        when().
            get("/{id}", id).
        then().
            statusCode(404).
            body("type", equalTo("error")).
            body("message", equalTo("Pet not found"));

        try {
            InputStream req = Files.newInputStream(Paths.get("logs", "request2.log"));
            InputStream res = Files.newInputStream(Paths.get("logs", "response2.log"));
            Allure.addAttachment("get request", "text/plain", req, ".log");
            Allure.addAttachment("get response", "text/plain", res, ".log");
        } catch (IOException e) { }
    }

}
*/
